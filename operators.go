// Code generated by gen-ops.sh. DO NOT EDIT.
package protolaser

func (f *MessageFilter) EqualFloat32(tag uint32, v float32, matchIfMissing bool) {
	f.setFilter(tag, equalFloat32{v}, matchIfMissing)
}

type equalFloat32 struct {
	v float32
}

func (f equalFloat32) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat32(wireType, pb)
	if err != nil {
		return err
	}
	if v == f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessThanFloat32(tag uint32, v float32, matchIfMissing bool) {
	f.setFilter(tag, lessThanFloat32{v}, matchIfMissing)
}

type lessThanFloat32 struct {
	v float32
}

func (f lessThanFloat32) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat32(wireType, pb)
	if err != nil {
		return err
	}
	if v < f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterThanFloat32(tag uint32, v float32, matchIfMissing bool) {
	f.setFilter(tag, greaterThanFloat32{v}, matchIfMissing)
}

type greaterThanFloat32 struct {
	v float32
}

func (f greaterThanFloat32) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat32(wireType, pb)
	if err != nil {
		return err
	}
	if v > f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessEqualFloat32(tag uint32, v float32, matchIfMissing bool) {
	f.setFilter(tag, lessEqualFloat32{v}, matchIfMissing)
}

type lessEqualFloat32 struct {
	v float32
}

func (f lessEqualFloat32) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat32(wireType, pb)
	if err != nil {
		return err
	}
	if v <= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterEqualFloat32(tag uint32, v float32, matchIfMissing bool) {
	f.setFilter(tag, greaterEqualFloat32{v}, matchIfMissing)
}

type greaterEqualFloat32 struct {
	v float32
}

func (f greaterEqualFloat32) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat32(wireType, pb)
	if err != nil {
		return err
	}
	if v >= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) Float32In(tag uint32, v []float32, matchIfMissing bool) {
	f.setFilter(tag, float32In{v}, matchIfMissing)
}

type float32In struct {
	v []float32
}

func (f float32In) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat32(wireType, pb)
	if err != nil {
		return err
	}
	for _, o := range f.v {
		if o == v {
			return nil
		}
	}
	return errMismatch
}

func (f *MessageFilter) ExtractFloat32(tag uint32, cb func(float32) error) {
	f.setFilter(tag, extractFloat32{cb}, true)
}

type extractFloat32 struct {
	cb func(float32) error
}

func (f extractFloat32) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat32(wireType, pb)
	if err != nil {
		return err
	}
	return f.cb(v)
}

func (f *MessageFilter) EqualFloat64(tag uint32, v float64, matchIfMissing bool) {
	f.setFilter(tag, equalFloat64{v}, matchIfMissing)
}

type equalFloat64 struct {
	v float64
}

func (f equalFloat64) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat64(wireType, pb)
	if err != nil {
		return err
	}
	if v == f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessThanFloat64(tag uint32, v float64, matchIfMissing bool) {
	f.setFilter(tag, lessThanFloat64{v}, matchIfMissing)
}

type lessThanFloat64 struct {
	v float64
}

func (f lessThanFloat64) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat64(wireType, pb)
	if err != nil {
		return err
	}
	if v < f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterThanFloat64(tag uint32, v float64, matchIfMissing bool) {
	f.setFilter(tag, greaterThanFloat64{v}, matchIfMissing)
}

type greaterThanFloat64 struct {
	v float64
}

func (f greaterThanFloat64) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat64(wireType, pb)
	if err != nil {
		return err
	}
	if v > f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessEqualFloat64(tag uint32, v float64, matchIfMissing bool) {
	f.setFilter(tag, lessEqualFloat64{v}, matchIfMissing)
}

type lessEqualFloat64 struct {
	v float64
}

func (f lessEqualFloat64) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat64(wireType, pb)
	if err != nil {
		return err
	}
	if v <= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterEqualFloat64(tag uint32, v float64, matchIfMissing bool) {
	f.setFilter(tag, greaterEqualFloat64{v}, matchIfMissing)
}

type greaterEqualFloat64 struct {
	v float64
}

func (f greaterEqualFloat64) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat64(wireType, pb)
	if err != nil {
		return err
	}
	if v >= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) Float64In(tag uint32, v []float64, matchIfMissing bool) {
	f.setFilter(tag, float64In{v}, matchIfMissing)
}

type float64In struct {
	v []float64
}

func (f float64In) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat64(wireType, pb)
	if err != nil {
		return err
	}
	for _, o := range f.v {
		if o == v {
			return nil
		}
	}
	return errMismatch
}

func (f *MessageFilter) ExtractFloat64(tag uint32, cb func(float64) error) {
	f.setFilter(tag, extractFloat64{cb}, true)
}

type extractFloat64 struct {
	cb func(float64) error
}

func (f extractFloat64) match(wireType wireType, pb []byte) error {
	v, err := decodeFloat64(wireType, pb)
	if err != nil {
		return err
	}
	return f.cb(v)
}

func (f *MessageFilter) EqualSignedInt(tag uint32, v int64, matchIfMissing bool) {
	f.setFilter(tag, equalSignedInt{v}, matchIfMissing)
}

type equalSignedInt struct {
	v int64
}

func (f equalSignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeSignedInt(wireType, pb)
	if err != nil {
		return err
	}
	if v == f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessThanSignedInt(tag uint32, v int64, matchIfMissing bool) {
	f.setFilter(tag, lessThanSignedInt{v}, matchIfMissing)
}

type lessThanSignedInt struct {
	v int64
}

func (f lessThanSignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeSignedInt(wireType, pb)
	if err != nil {
		return err
	}
	if v < f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterThanSignedInt(tag uint32, v int64, matchIfMissing bool) {
	f.setFilter(tag, greaterThanSignedInt{v}, matchIfMissing)
}

type greaterThanSignedInt struct {
	v int64
}

func (f greaterThanSignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeSignedInt(wireType, pb)
	if err != nil {
		return err
	}
	if v > f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessEqualSignedInt(tag uint32, v int64, matchIfMissing bool) {
	f.setFilter(tag, lessEqualSignedInt{v}, matchIfMissing)
}

type lessEqualSignedInt struct {
	v int64
}

func (f lessEqualSignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeSignedInt(wireType, pb)
	if err != nil {
		return err
	}
	if v <= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterEqualSignedInt(tag uint32, v int64, matchIfMissing bool) {
	f.setFilter(tag, greaterEqualSignedInt{v}, matchIfMissing)
}

type greaterEqualSignedInt struct {
	v int64
}

func (f greaterEqualSignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeSignedInt(wireType, pb)
	if err != nil {
		return err
	}
	if v >= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) SignedIntIn(tag uint32, v []int64, matchIfMissing bool) {
	f.setFilter(tag, signedIntIn{v}, matchIfMissing)
}

type signedIntIn struct {
	v []int64
}

func (f signedIntIn) match(wireType wireType, pb []byte) error {
	v, err := decodeSignedInt(wireType, pb)
	if err != nil {
		return err
	}
	for _, o := range f.v {
		if o == v {
			return nil
		}
	}
	return errMismatch
}

func (f *MessageFilter) ExtractSignedInt(tag uint32, cb func(int64) error) {
	f.setFilter(tag, extractSignedInt{cb}, true)
}

type extractSignedInt struct {
	cb func(int64) error
}

func (f extractSignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeSignedInt(wireType, pb)
	if err != nil {
		return err
	}
	return f.cb(v)
}

func (f *MessageFilter) EqualUnsignedInt(tag uint32, v uint64, matchIfMissing bool) {
	f.setFilter(tag, equalUnsignedInt{v}, matchIfMissing)
}

type equalUnsignedInt struct {
	v uint64
}

func (f equalUnsignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeUnsignedInt(wireType, pb)
	if err != nil {
		return err
	}
	if v == f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessThanUnsignedInt(tag uint32, v uint64, matchIfMissing bool) {
	f.setFilter(tag, lessThanUnsignedInt{v}, matchIfMissing)
}

type lessThanUnsignedInt struct {
	v uint64
}

func (f lessThanUnsignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeUnsignedInt(wireType, pb)
	if err != nil {
		return err
	}
	if v < f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterThanUnsignedInt(tag uint32, v uint64, matchIfMissing bool) {
	f.setFilter(tag, greaterThanUnsignedInt{v}, matchIfMissing)
}

type greaterThanUnsignedInt struct {
	v uint64
}

func (f greaterThanUnsignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeUnsignedInt(wireType, pb)
	if err != nil {
		return err
	}
	if v > f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessEqualUnsignedInt(tag uint32, v uint64, matchIfMissing bool) {
	f.setFilter(tag, lessEqualUnsignedInt{v}, matchIfMissing)
}

type lessEqualUnsignedInt struct {
	v uint64
}

func (f lessEqualUnsignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeUnsignedInt(wireType, pb)
	if err != nil {
		return err
	}
	if v <= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterEqualUnsignedInt(tag uint32, v uint64, matchIfMissing bool) {
	f.setFilter(tag, greaterEqualUnsignedInt{v}, matchIfMissing)
}

type greaterEqualUnsignedInt struct {
	v uint64
}

func (f greaterEqualUnsignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeUnsignedInt(wireType, pb)
	if err != nil {
		return err
	}
	if v >= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) UnsignedIntIn(tag uint32, v []uint64, matchIfMissing bool) {
	f.setFilter(tag, unsignedIntIn{v}, matchIfMissing)
}

type unsignedIntIn struct {
	v []uint64
}

func (f unsignedIntIn) match(wireType wireType, pb []byte) error {
	v, err := decodeUnsignedInt(wireType, pb)
	if err != nil {
		return err
	}
	for _, o := range f.v {
		if o == v {
			return nil
		}
	}
	return errMismatch
}

func (f *MessageFilter) ExtractUnsignedInt(tag uint32, cb func(uint64) error) {
	f.setFilter(tag, extractUnsignedInt{cb}, true)
}

type extractUnsignedInt struct {
	cb func(uint64) error
}

func (f extractUnsignedInt) match(wireType wireType, pb []byte) error {
	v, err := decodeUnsignedInt(wireType, pb)
	if err != nil {
		return err
	}
	return f.cb(v)
}

func (f *MessageFilter) EqualInt32(tag uint32, v int32, matchIfMissing bool) {
	f.setFilter(tag, equalInt32{v}, matchIfMissing)
}

type equalInt32 struct {
	v int32
}

func (f equalInt32) match(wireType wireType, pb []byte) error {
	v, err := decodeInt32(wireType, pb)
	if err != nil {
		return err
	}
	if v == f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessThanInt32(tag uint32, v int32, matchIfMissing bool) {
	f.setFilter(tag, lessThanInt32{v}, matchIfMissing)
}

type lessThanInt32 struct {
	v int32
}

func (f lessThanInt32) match(wireType wireType, pb []byte) error {
	v, err := decodeInt32(wireType, pb)
	if err != nil {
		return err
	}
	if v < f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterThanInt32(tag uint32, v int32, matchIfMissing bool) {
	f.setFilter(tag, greaterThanInt32{v}, matchIfMissing)
}

type greaterThanInt32 struct {
	v int32
}

func (f greaterThanInt32) match(wireType wireType, pb []byte) error {
	v, err := decodeInt32(wireType, pb)
	if err != nil {
		return err
	}
	if v > f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessEqualInt32(tag uint32, v int32, matchIfMissing bool) {
	f.setFilter(tag, lessEqualInt32{v}, matchIfMissing)
}

type lessEqualInt32 struct {
	v int32
}

func (f lessEqualInt32) match(wireType wireType, pb []byte) error {
	v, err := decodeInt32(wireType, pb)
	if err != nil {
		return err
	}
	if v <= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterEqualInt32(tag uint32, v int32, matchIfMissing bool) {
	f.setFilter(tag, greaterEqualInt32{v}, matchIfMissing)
}

type greaterEqualInt32 struct {
	v int32
}

func (f greaterEqualInt32) match(wireType wireType, pb []byte) error {
	v, err := decodeInt32(wireType, pb)
	if err != nil {
		return err
	}
	if v >= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) Int32In(tag uint32, v []int32, matchIfMissing bool) {
	f.setFilter(tag, int32In{v}, matchIfMissing)
}

type int32In struct {
	v []int32
}

func (f int32In) match(wireType wireType, pb []byte) error {
	v, err := decodeInt32(wireType, pb)
	if err != nil {
		return err
	}
	for _, o := range f.v {
		if o == v {
			return nil
		}
	}
	return errMismatch
}

func (f *MessageFilter) ExtractInt32(tag uint32, cb func(int32) error) {
	f.setFilter(tag, extractInt32{cb}, true)
}

type extractInt32 struct {
	cb func(int32) error
}

func (f extractInt32) match(wireType wireType, pb []byte) error {
	v, err := decodeInt32(wireType, pb)
	if err != nil {
		return err
	}
	return f.cb(v)
}

func (f *MessageFilter) EqualInt64(tag uint32, v int64, matchIfMissing bool) {
	f.setFilter(tag, equalInt64{v}, matchIfMissing)
}

type equalInt64 struct {
	v int64
}

func (f equalInt64) match(wireType wireType, pb []byte) error {
	v, err := decodeInt64(wireType, pb)
	if err != nil {
		return err
	}
	if v == f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessThanInt64(tag uint32, v int64, matchIfMissing bool) {
	f.setFilter(tag, lessThanInt64{v}, matchIfMissing)
}

type lessThanInt64 struct {
	v int64
}

func (f lessThanInt64) match(wireType wireType, pb []byte) error {
	v, err := decodeInt64(wireType, pb)
	if err != nil {
		return err
	}
	if v < f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterThanInt64(tag uint32, v int64, matchIfMissing bool) {
	f.setFilter(tag, greaterThanInt64{v}, matchIfMissing)
}

type greaterThanInt64 struct {
	v int64
}

func (f greaterThanInt64) match(wireType wireType, pb []byte) error {
	v, err := decodeInt64(wireType, pb)
	if err != nil {
		return err
	}
	if v > f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) LessEqualInt64(tag uint32, v int64, matchIfMissing bool) {
	f.setFilter(tag, lessEqualInt64{v}, matchIfMissing)
}

type lessEqualInt64 struct {
	v int64
}

func (f lessEqualInt64) match(wireType wireType, pb []byte) error {
	v, err := decodeInt64(wireType, pb)
	if err != nil {
		return err
	}
	if v <= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) GreaterEqualInt64(tag uint32, v int64, matchIfMissing bool) {
	f.setFilter(tag, greaterEqualInt64{v}, matchIfMissing)
}

type greaterEqualInt64 struct {
	v int64
}

func (f greaterEqualInt64) match(wireType wireType, pb []byte) error {
	v, err := decodeInt64(wireType, pb)
	if err != nil {
		return err
	}
	if v >= f.v {
		return nil
	}
	return errMismatch
}

func (f *MessageFilter) Int64In(tag uint32, v []int64, matchIfMissing bool) {
	f.setFilter(tag, int64In{v}, matchIfMissing)
}

type int64In struct {
	v []int64
}

func (f int64In) match(wireType wireType, pb []byte) error {
	v, err := decodeInt64(wireType, pb)
	if err != nil {
		return err
	}
	for _, o := range f.v {
		if o == v {
			return nil
		}
	}
	return errMismatch
}

func (f *MessageFilter) ExtractInt64(tag uint32, cb func(int64) error) {
	f.setFilter(tag, extractInt64{cb}, true)
}

type extractInt64 struct {
	cb func(int64) error
}

func (f extractInt64) match(wireType wireType, pb []byte) error {
	v, err := decodeInt64(wireType, pb)
	if err != nil {
		return err
	}
	return f.cb(v)
}
