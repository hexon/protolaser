#!/bin/bash

set -eu

generate_type() {
	generate_type_and_operator "$1" "$2" equal "=="
	generate_type_and_operator "$1" "$2" lessThan "<"
	generate_type_and_operator "$1" "$2" greaterThan ">"
	generate_type_and_operator "$1" "$2" lessEqual "<="
	generate_type_and_operator "$1" "$2" greaterEqual ">="
	generate_type_in_operator "$1" "$2"
	generate_type_extractor "$1" "$2"
}

generate_type_and_operator() {
	local TYPENAME="$1"
	local GOTYPE="$2"
	local OPNAME="$3"
	local GOOP="$4"

	cat <<EOF

func (f *MessageFilter) ${OPNAME^}${TYPENAME^}(tag uint32, v ${GOTYPE}, matchIfMissing bool) {
	f.setFilter(tag, ${OPNAME}${TYPENAME^}{v}, matchIfMissing)
}

type ${OPNAME}${TYPENAME^} struct {
	v ${GOTYPE}
}

func (f ${OPNAME}${TYPENAME^}) match(wireType protowire.Type, pb []byte) error {
	v, err := decode${TYPENAME^}(wireType, pb)
	if err != nil {
		return err
	}
	if v ${GOOP} f.v {
		return nil
	}
	return errMismatch
}
EOF
}

generate_type_in_operator() {
	local TYPENAME="$1"
	local GOTYPE="$2"

	cat <<EOF

func (f *MessageFilter) ${TYPENAME^}In(tag uint32, v []${GOTYPE}, matchIfMissing bool) {
	f.setFilter(tag, ${TYPENAME}In{v}, matchIfMissing)
}

type ${TYPENAME}In struct {
	v []${GOTYPE}
}

func (f ${TYPENAME}In) match(wireType protowire.Type, pb []byte) error {
	v, err := decode${TYPENAME^}(wireType, pb)
	if err != nil {
		return err
	}
	for _, o := range f.v {
		if o == v {
			return nil
		}
	}
	return errMismatch
}
EOF
}

generate_type_extractor() {
	local TYPENAME="$1"
	local GOTYPE="$2"

	cat <<EOF

func (f *MessageFilter) Extract${TYPENAME^}(tag uint32, cb func(${GOTYPE}) error) {
	f.setFilter(tag, extract${TYPENAME^}{cb}, true)
}

type extract${TYPENAME^} struct {
	cb func(${GOTYPE}) error
}

func (f extract${TYPENAME^}) match(wireType protowire.Type, pb []byte) error {
	v, err := decode${TYPENAME^}(wireType, pb)
	if err != nil {
		return err
	}
	return f.cb(v)
}
EOF
}

echo "// Code generated by gen-ops.sh. DO NOT EDIT."
echo "package protolaser"
echo
echo "import ("
echo '	"google.golang.org/protobuf/encoding/protowire"'
echo ")"

generate_type float32 float32
generate_type float64 float64
generate_type signedInt int64
generate_type unsignedInt uint64
generate_type int32 int32
generate_type int64 int64
